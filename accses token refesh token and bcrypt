const express = require('express')
const app = express();
const bodyParser = require('body-parser')
const bcrypt = require('bcrypt');
const schemamodel = require('./appschema')
const mongoose = require('mongoose')
const jwt = require('jsonwebtoken');
const { schema } = require('./appschema');
const port = 3000
require('dotenv').config()

app.use(bodyParser.json())

var randtoken = require('rand-token')


const query = "mongodb+srv://admin:admin@cluster0.b9pn7.mongodb.net/mydatabase?retryWrites=true&w=majority"
mongoose.connect(query, {
    useNewUrlParser: true,
    useUnifiedTopology: true
}).then(() => {
    console.log("Connection successful")
}).catch(err => {
    console.log("Error", err)
})

app.post('/register',async (req,res) => {
    const salt = await bcrypt.genSalt(10)
    req.body.password = await bcrypt.hash(req.body.password,salt)
        schemamodel.create(req.body).then(user => {
                res.send(user)
            }).catch(err => {
                console.log(err)
            })
    // const newschema = new schemamodel()
    // newschema.email = req.body.email;
    // newschema.password = req.body.password;
    
        
    // newschema.save((err,data)=>{
    //         if(err){
    //             console.log(error)
    //         }
    //         else{
    //             res.send("data inserted")
    //         }
    //     })
})

// app.delete('/delete', (req, res) => {
//     schemamodel.remove({ email: " }, (err, data) => {
//         if (err) {
//             console.log(error)
//         }
//         else {
//             // console.log("data deleted")
//             res.send(data)//show on postman
//         }
//     })
// })
// app.put('/update', (req, res) => {
//     schemamodel.findByIdAndUpdate(req.body.id, { email: req.body.email }, (err, data) => {
//         if (err) {
//             console.log(error)
//         }
//         else {
//             // console.log("data updated")
//             console.send(data)
//         }
//     })
// })
app.post("/login",async (req,res)=>{
    const user = await schemamodel.findOne({email:req.body.email})
    if(user){
     const validatePassword = await bcrypt.compare(req.body.password, user.password)
     if(validatePassword){
         const token = jwt.sign({email:user.email},process.env.ACCESS_TOKEN_SECRET,{"expiresIn":"15m"})
         const refreshtoken = jwt.sign({email:user.email},process.env.REFRESH_TOKEN_SECRET,{"expiresIn":"30m"})
         res.send({message:"token has been Generate Successfully",token:token,refreshToken:refreshtoken})
     } else{
         res.send("Password is incorrect")
     }
    }else{
        res.send("User not found")
    }
 })

 app.post('/refreshtoken',(req,res)=>{
    const refreshToken = req.body.refreshToken
    if(refreshToken == null) return res.status(401).send("Token not found")
    jwt.verify(refreshToken,process.env.REFRESH_TOKEN_SECRET,(err,user)=>{
        if(err) return res.status(401).send("Token is incorrect")
        const accessToken = generateAccessToken({email:req.body.email})
        const refreshtoken = jwt.sign({email:user.email},process.env.REFRESH_TOKEN_SECRET,{"expiresIn":"30m"})
        res.send({accessToken:accessToken,refreshToken:refreshtoken})
    })
})
function generateAccessToken(user){
    return jwt.sign(user,process.env.ACCESS_TOKEN_SECRET,{"expiresIn":"15m"})
}
 //we want to verify token
 const chektoken = (req,res,next)=>{
     //here is token
     const header = req.headers.authorization
     const token = header && header.split(' ')[1]
     console.log(token)
     if(token == null) return res.send('token not found')
     jwt.verify(token,process.env.ACCESS_TOKEN_SECRET,(err,verifiedJwt)=>{
         if(err)return res.send("token is expired or it may be incorrect")
         next();
     })
 }
 app.use(chektoken);
 app.get('/',(req,res)=>{
     schemamodel.find((err,data)=>{
         if(err){
             console.log(err)
         }
         else{
             res.send(data)
         }

     })
 })

app.listen(port, () => {
    console.log(`server is ready on ${port}`)
})




///////
.env
ACCESS_TOKEN_SECRET = 7b5f1a300fc2ea5fb2fe605cbaa0610caa0d07a27df64ca26dd86dd749
aeb0b198711390baa300b909d26af01afbeea6cd15b865efc8dfjkjdfjg0743981d329b731046a4

REFRESH_TOKEN_SECRET = 0a44045af3cccecf076b20ec1fa737c70cf98c04bdb6bf8d8668674970466d054
ac8d4519abdd7d44b7f856fed2b223f2cgjjsdhgh9fe491ef476ca1c1d65ad7b997d473


appschema.js

const mongoose = require('mongoose')

const RegisterSchema = mongoose.Schema({
  email: {
    type: String,
  },
  password: {
    type: String,
  }
});

module.exports = mongoose.model("Register", RegisterSchema);
